<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:amq="http://activemq.apache.org/schema/core" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   
       					http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- allow overriding --> 
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
        	<list>
            	<value>file:${activemq.conf}/credentials.properties</value>
            	<value>file:${activemq.conf}/credentials-override.properties</value>
            </list>
        </property>
    </bean>
	
	<bean id="logQuery" class="org.fusesource.insight.log.log4j.Log4jLogQuery"
		lazy-init="false" scope="singleton" init-method="start"
		destroy-method="stop">
	</bean>

	<broker xmlns="http://activemq.apache.org/schema/core"
		brokerName="${brokerName}" brokerId="${brokerName}" dataDirectory="${activemq.data}"
		networkConnectorStartAsync="true">
		<plugins>
			<simpleAuthenticationPlugin>
				<users>
					<authenticationUser username="${admin.username}" password="${admin.password}" groups="users,admins" />
					<authenticationUser username="${brokers1.username}" password="${brokers1.password}" groups="users,admins" />
					<authenticationUser username="${test.username}" password="${test.password}" groups="users" />
				</users>
			</simpleAuthenticationPlugin>

			<authorizationPlugin>
				<map>
					<authorizationMap>
						<authorizationEntries>
							<authorizationEntry queue=">" read="users" write="users" admin="users" />
							<authorizationEntry topic=">" read="users" write="users" admin="users" />
						</authorizationEntries>
						<tempDestinationAuthorizationEntry>
							<tempDestinationAuthorizationEntry read="tempDestinationAdmins" write="tempDestinationAdmins" admin="tempDestinationAdmins" />
						</tempDestinationAuthorizationEntry>
					</authorizationMap>
				</map>
			</authorizationPlugin>
			
		    <bean xmlns="http://www.springframework.org/schema/beans" id="discardingDLQBrokerPlugin" class="org.apache.activemq.plugin.DiscardingDLQBrokerPlugin">
	          <property xmlns="http://www.springframework.org/schema/beans" name="dropAll" value="false"/>
	          <property xmlns="http://www.springframework.org/schema/beans" name="dropOnly">
	            <value xmlns="http://www.springframework.org/schema/beans"><![CDATA[^(.(?<!AVS))*?$]]></value>
	          </property>
	          <property xmlns="http://www.springframework.org/schema/beans" name="dropTemporaryTopics" value="true"/>
	          <property xmlns="http://www.springframework.org/schema/beans" name="dropTemporaryQueues" value="true"/>
	          <property xmlns="http://www.springframework.org/schema/beans" name="reportInterval" value="1000"/>
	       </bean>
      
		</plugins>
		
		<destinationPolicy>
			<policyMap>
				<policyEntries>
					<policyEntry topic=">">
						<pendingMessageLimitStrategy>
							<constantPendingMessageLimitStrategy
								limit="1000" />
						</pendingMessageLimitStrategy>
						<messageEvictionStrategy>
						    <oldestMessageWithLowestPriorityEvictionStrategy/>
						</messageEvictionStrategy>
					</policyEntry>
					<policyEntry queue=">" enableAudit="false"
						queuePrefetch="10" consumersBeforeDispatchStarts="2" timeBeforeDispatchStarts="2000">
						<networkBridgeFilterFactory>
							<conditionalNetworkBridgeFilterFactory
								replayWhenNoConsumers="true" />
						</networkBridgeFilterFactory>
						<deadLetterStrategy>
							<individualDeadLetterStrategy
								queuePrefix="DLQ." useQueueForQueueMessages="true" />
						</deadLetterStrategy>
					</policyEntry>
				</policyEntries>
			</policyMap>
		</destinationPolicy>

		<managementContext>
			<managementContext createConnector="true" connectorPort="1099">
				<property xmlns="http://www.springframework.org/schema/beans"
					name="environment">
					<map xmlns="http://www.springframework.org/schema/beans">
						<entry xmlns="http://www.springframework.org/schema/beans"
							key="jmx.remote.x.password.file" value="${activemq.base}/conf/jmx.password" />
						<entry xmlns="http://www.springframework.org/schema/beans"
							key="jmx.remote.x.access.file" value="${activemq.base}/conf/jmx.access" />
					</map>
				</property>
			</managementContext>
		</managementContext>

		<persistenceAdapter>
			<kahaDB directory="${activemq.data}/kahadb"
				concurrentStoreAndDispatchQueues="false" />
		</persistenceAdapter>

		<systemUsage>
			<systemUsage sendFailIfNoSpaceAfterTimeout="30000">
				<memoryUsage>
					<memoryUsage percentOfJvmHeap="70" />
				</memoryUsage>
				<storeUsage>
					<storeUsage limit="140 gb" />
				</storeUsage>
				<tempUsage>
					<tempUsage limit="20 gb" />
				</tempUsage>
			</systemUsage>
		</systemUsage>

		<networkConnectors>
			<networkConnector name="topicOnly" uri="${multicastUri}"
				dynamicOnly="true" networkTTL="3"
				suppressDuplicateQueueSubscriptions="true"
				decreaseNetworkConsumerPriority="true"
				userName="${brokers1.username}"
                password="${brokers1.password}">
				<dynamicallyIncludedDestinations>
					<topic physicalName=">" />
				</dynamicallyIncludedDestinations>
				<excludedDestinations>
					<topic physicalName="VirtualTopic.>" />
				</excludedDestinations>
			</networkConnector>
			<networkConnector name="queueOnly" uri="${multicastUri}"
				dynamicOnly="true" prefetchSize="1" conduitSubscriptions="false" networkTTL="3"
				suppressDuplicateQueueSubscriptions="true"
				decreaseNetworkConsumerPriority="true"
				userName="${brokers1.username}"
                password="${brokers1.password}">
				<dynamicallyIncludedDestinations>
					<queue physicalName=">" />
				</dynamicallyIncludedDestinations>
			</networkConnector>
		</networkConnectors>

		<transportConnectors>
			<transportConnector name="default+nio" uri="nio://0.0.0.0:61688"
				discoveryUri="${multicastUri}" updateClusterClients="true"
				rebalanceClusterClients="true" updateClusterClientsOnRemove="true" />
			<transportConnector name="stomp+nio" uri="stomp+nio://0.0.0.0:61613" 
				updateClusterClients="true" rebalanceClusterClients="true"
				updateClusterClientsOnRemove="true" />
		</transportConnectors>

		<shutdownHooks>
			<bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
		</shutdownHooks>
	</broker>

	<import resource="jetty.xml" />
</beans>
